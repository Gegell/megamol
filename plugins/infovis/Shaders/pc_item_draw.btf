<?xml version="1.0" encoding="utf-8"?>
<btf namespace="pc_item_draw" type="MegaMolGLSLShader" version="1.0">

  <include file="pc" />
  <include file="core_utils" />

  <snippet name="interface" type="string">
    <![CDATA[
flat uint itemID;
flat uint worldSpaceAxis;
flat uint dataDimension;
flat uint dataID;
flat vec4 color;
    ]]>
  </snippet>

  <snippet name="tessuniforms" type="string">
    <![CDATA[
uniform int isoLinesPerInvocation;
    ]]>
  </snippet>

  <snippet name="vertexShaderMain" type="string">
    <![CDATA[

void main()
{
#define DOLINES
//#define DOSTRIPS

#ifdef DOSTRIPS
  uint instanceID = gl_InstanceID; //getInstanceID();
  out_.itemID = instanceID;

#ifdef DOLINES // line strip
  uint theID = gl_VertexID;
#else          // triangle strip
  uint theID = gl_VertexID / 2;
#endif

#else // no strips
#ifdef DOLINES // single lines
  uint instanceID = gl_VertexID / ((dimensionCount - 1) * 2);
  out_.itemID = instanceID;
  uint theID = gl_VertexID % ((dimensionCount - 1) * 2);
  theID = (theID + 1) / 2;
#else          // single triangles
  uint instanceID = gl_VertexID / ((dimensionCount - 1) * 6);
  out_.itemID = instanceID;
  uint theID = gl_VertexID % ((dimensionCount - 1) * 6);
  theID = (theID / 6) + ((theID % 6) / 2) - ((theID % 6) / 3);
#endif
#endif

  out_.dataDimension = pc_dimension(theID);
  out_.worldSpaceAxis = theID;

  out_.dataID = pc_item_dataID(out_.itemID, out_.dataDimension);

  float value = out_.itemID / float(itemCount - 1);
  if (colorColumn != -1) {
    value = pc_item_dataValue_unscaled(pc_item_dataID(out_.itemID, colorColumn));
  }
  if (bitflag_test(flags[out_.itemID], FLAG_SELECTED, FLAG_SELECTED)) {
    out_.color = color;
  } else {
    out_.color = mix(color, tflookup(value), tfColorFactor);
  }

  vec4 vertex = pc_item_vertex(out_.itemID, out_.dataID, out_.dataDimension, out_.worldSpaceAxis);
#ifndef DOLINES // triangles need to be "less degenerate"
  vertex.y += (gl_VertexID % 2) * axisHeight * 0.002;
#endif

#if 0
  else
  {
    const vec4 center = vec4(vertex.x, 0.5 * scaling.y, vertex.z, vertex.w);
    float alpha = smoothstep(0.0, 1.0, float(tick) * 0.001f);
    vertex = mix(center, vertex, alpha);
  }
#endif
  if (bitflag_test(flags[out_.itemID], fragmentTestMask, fragmentPassMask)) {
    gl_ClipDistance[0] = 1.0;
  } else {
    gl_ClipDistance[0] = -1.0;
  }
  gl_Position = projection * modelView * vertex;
}
    ]]>
  </snippet>

  <snippet name="vertexShaderMainT" type="string">
    <![CDATA[
uniform vec2 res = vec2(1,1);
uniform float widthR = 1.0;
uniform float heightR = 1.0;
uniform float thicknessP;

void main()
{
#define DOLINES
//#define DOSTRIPS

  // id of line segment
  uint instanceID = gl_VertexID / ((dimensionCount - 1) * 6);
  out_.itemID = instanceID;
  // ID of Dimension being look at
  uint theID = gl_VertexID % ((dimensionCount - 1) * 6);
  theID = (theID / 6) + ((theID % 6) / 2) - ((theID % 6) / 3);

  out_.dataDimension = pc_dimension(theID);
  out_.worldSpaceAxis = theID;

  out_.dataID = pc_item_dataID(out_.itemID, out_.dataDimension);

  float value = out_.itemID / float(itemCount - 1);
  if (colorColumn != -1) {
    value = pc_item_dataValue_unscaled(pc_item_dataID(out_.itemID, colorColumn));
  }
  if (bitflag_test(flags[out_.itemID], FLAG_SELECTED, FLAG_SELECTED)) {
    out_.color = color;
  } else {
    out_.color = mix(color, tflookup(value), tfColorFactor);
  }

  // aktuell betrachteter Vertex
  vec4 vertex = pc_item_vertex(out_.itemID, out_.dataID, out_.dataDimension, out_.worldSpaceAxis);
  // Vertices auf der linken und rechten Achse
  vec4 vertexL = pc_item_vertex(out_.itemID, pc_item_dataID(out_.itemID, pc_dimension(theID-1)), pc_dimension(theID-1), out_.worldSpaceAxis-1);
  vec4 vertexR = pc_item_vertex(out_.itemID, pc_item_dataID(out_.itemID, pc_dimension(theID+1)), pc_dimension(theID+1), out_.worldSpaceAxis+1);

  //vertex.y += (gl_VertexID % 2) * axisHeight * 0.002;

  vec2 tempL = vec2(0, 0.0);
  vec2 tempR = vec2(0.0, 0.0);
  // magic number, to be changed to resolution based calculation
  float thickness = thicknessP * sqrt(1/pow(widthR,2) + 1/pow(heightR,2));

  if (out_.worldSpaceAxis != 0 && out_.worldSpaceAxis != dimensionCount) {
    // Vektoren von linken zum aktuellen Vertex, dies ist die Linie die von links kommt
    tempL =  (projection * modelView * vertex - projection * modelView * vertexL).xy;
    // Linie zur naechsten Achse
    tempR =  (projection * modelView * vertexR - projection * modelView * vertex).xy;

    tempL = normalize(tempL);
    tempR = normalize(tempR);
    tempL.x *= widthR;
    tempR.x *= widthR;
    tempL.y *= heightR;
    tempR.y *= heightR;

    // Bestimmung der Orthogonalen durch Drehung
    //vec2 oL = vec2(-tempL.y * res.y / res.x, tempL.x * res.x / res.y);
    vec2 oL = vec2(-tempL.y, tempL.x);
    //vec2 oR = vec2(-tempR.y * res.y/res.x, tempR.x*res.x/res.y);
    vec2 oR = vec2(-tempR.y, tempR.x);

    // benoetigt zur berechnung des laenge des offset vektors
    oL = thickness * normalize(oL);
    oR = thickness * normalize(oR);

    // h ist winkelhalbierende
    vec2 h = normalize(oL + oR);
    //out_.color = vec4(heightR / widthR, 0.0 , 0.0, 1.0);

    // laenge der winkelhalbierenden um dicke zu garantieren, berechnet aus Winkel der rechten orthogonalen und der winkelhalbierenden
    h = h * thickness / dot(oR, h) * (length(oR) * length(h));
    h.x *= 1.0 * heightR / widthR ;
    tempL = h;
  }

  if (out_.worldSpaceAxis == 0) {
    tempR = (projection * modelView * vertexR - projection * modelView * vertex).xy;
    tempR = normalize(tempR);
    tempR.x *= widthR;
    tempR.y *= heightR;
    vec2 oR = vec2(-tempR.y, tempR.x);
    oR = thickness * normalize(oR);
    tempL = vec2(0.0, 1.0) * thickness * thickness / dot(oR, vec2(0.0, 1.0));
    //out_.color = vec4(pc_item_dataValue(pc_item_dataID(out_.itemID, pc_dimension(theID + 1)), pc_dimension(theID + 1)), 0.0, 1.0, 1.0);
  }
  if (out_.worldSpaceAxis == dimensionCount - 1) {
    //tempL =  (projection * modelView * vertex - projection * modelView * vertexL).xy;
    //vec2 oL = vec2(-tempL.y, tempL.x);
    //tempL = vec2(0.0, 1.0) * thickness * thickness / dot(oL, vec2(0.0, 1.0));
    //out_.color = vec4(1.0, 0.0, 1.0, 1.0);
    tempL = (projection * modelView * vertex - projection * modelView * vertexL).xy;
    tempL = normalize(tempL);
    tempL.x *= widthR;
    tempL.y *= heightR;
    vec2 oL = vec2(-tempL.y, tempL.x);
    oL = thickness * normalize(oL);
    tempL = vec2(0.0, 1.0) * thickness * thickness / dot(oL, vec2(0.0, 1.0));
  }
  vec2 offset = (-0.5 + (gl_VertexID % 2)) * tempL;
  //offset.y *= 2.3839096683;
  //vertex = vertex + vec4(offset, 0.0, 0.0);

#if 0
  else
  {
    const vec4 center = vec4(vertex.x, 0.5 * scaling.y, vertex.z, vertex.w);
    float alpha = smoothstep(0.0, 1.0, float(tick) * 0.001f);
    vertex = mix(center, vertex, alpha);
  }
#endif
  if (bitflag_test(flags[out_.itemID], fragmentTestMask, fragmentPassMask)) {
    gl_ClipDistance[0] = 1.0;
  } else {
    gl_ClipDistance[0] = -1.0;
  }
  //vertex = vertexL;
  gl_Position = projection * modelView * (vertex) + (vec4(offset, 0.0, 0.0));
}
    ]]>
</snippet>

  <namespace name="continuous">
    <snippet name="uniforms" type="string">
      <![CDATA[
layout(binding = 1) uniform sampler2D fragCount;
layout(early_fragment_tests) in;
uniform vec4 clearColor = vec4(0.0);
      ]]>
    </snippet>

    <shader name="comp">
      <snippet type="version">440</snippet>
      <snippet name="::pc::extensions" />
      <snippet name="::pc::useLineStrip" />
      <snippet name="::pc::buffers" />
      <snippet name="::pc::uniforms" />
      <snippet name="::pc_item_draw::continuous::uniforms" />
      <snippet type="string">
        <![CDATA[
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform uvec2 resolution = uvec2(0);
//uniform uvec2 stepSize = uvec2(3);
uniform uvec2 fragmentCountStepSize = uvec2(16);

void main()
{

  uint minFrag = 4294967295u;
  uint maxFrag = 0;

  uvec2 start = min(gl_GlobalInvocationID.xy * fragmentCountStepSize, resolution);
  uvec2 end = min(start + fragmentCountStepSize, resolution);
  uvec2 texCoord = start;

  if (any(greaterThanEqual(start, resolution)) || any(greaterThan(end, resolution)))
  {
    return;
  }

  while (texCoord.y < end.y)
  {
    texCoord.x = start.x;

    while (texCoord.x < end.x)
    {
      vec4 texel = texelFetch(fragCount, ivec2(texCoord), 0) - clearColor;
      uint count = uint(texel.r);

      if (count > 0 && count < minFrag)
      {
        minFrag = count;
      }

      if (count > maxFrag)
      {
        maxFrag = count;
      }

      ++texCoord.x;
    }

    ++texCoord.y;
  }

  atomicMin(minFragmentCount, minFrag);
  atomicMax(maxFragmentCount, maxFrag);
}
        ]]>
      </snippet>
    </shader>

    <shader name="vert">
      <snippet type="version">440</snippet>
      <snippet name="::pc::extensions" />
      <snippet name="::pc::uniforms" />
      <snippet name="::pc_item_draw::continuous::uniforms" />
      <snippet type="string">
        <![CDATA[
uniform vec2 bottomLeft = vec2(-1.0);
uniform vec2 topRight = vec2(1.0);

smooth out vec2 texCoord;

void main()
{
  const vec2 vertices[6] =
  {
  // b_l, b_r, t_r
  bottomLeft, vec2(topRight.x, bottomLeft.y), topRight
  // t_r, t_l, b_l
  , topRight, vec2(bottomLeft.x, topRight.y), bottomLeft
  };

  const vec2 texCoords[6] =
  {
  // b_l, b_r, t_r
  vec2(0.0), vec2(1.0, 0.0), vec2(1.0)
  // t_r, t_l, b_l
  , vec2(1.0), vec2(0.0, 1.0), vec2(0.0)
  };

  texCoord = texCoords[gl_VertexID];

  vec4 vertex = vec4(vertices[gl_VertexID], pc_item_defaultDepth, 1.0);

  gl_Position = /*projection * modelView */ vertex;
}
        ]]>
      </snippet>
    </shader>

    <shader name="frag">
      <snippet type="version">440</snippet>
      <snippet name="::core_utils::tflookup" />
      <snippet name="::core_utils::tfconvenience" />
      <snippet name="::pc::extensions" />
      <snippet name="::pc::buffers" />
      <snippet name="::pc::uniforms" />
      <snippet name="::pc_item_draw::continuous::uniforms" />
      <snippet type="string">
        <![CDATA[
smooth in vec2 texCoord;
layout(early_fragment_tests) in;
layout(location = 0) out vec4 fragColor;

void main()
{
  vec4 frags = texture(fragCount, texCoord) - clearColor;

  if (frags.r >= minFragmentCount)
  {
    float value = (frags.r - minFragmentCount) / (maxFragmentCount - minFragmentCount);
    value = clamp(value, 0.0, 1.0);
    fragColor = tflookup(value);
    //fragColor = vec4(vec3(gl_FragCoord.z), 1.0);
  }
  else
  {
    fragColor = clearColor;
  }
}
        ]]>
      </snippet>
    </shader>
  </namespace>

  <namespace name="histogram">
    <snippet name="uniforms" type="string">
      <![CDATA[
layout(binding = 1) uniform sampler2D fragCount;
uniform vec4 clearColor = vec4(0.0);
      ]]>
    </snippet>
  </namespace>
</btf>
